0.5^5
0.5^6
0.5^7
b0_p_mat = matrix(ncol=ncol(HQdpONLY), nrow=nrow(HQdpONLY))
for (i in 1:nrow(seqdata)){
for (j in 1:length(sample_names)){
if (HQdpONLY[i,j] == 0){
b0_p_mat[i,j] = 1
} else if (HQaltONLY[i,j] > 0){
b0_p_mat[i,j] = 1
} else {
b0_p_mat[i,j] = 0.5^HQdpONLY[i,j]
}
}
}
zero01 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.01))
zero01
zerosig = data.frame(ID=HQdp[,1], zero01=
ero01)
zero01 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.01))
zerosig = data.frame(ID=HQdp[,1], zero01=zero01)
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
candidate_p10u_altomit_alt2[which(candidate_p10u_altomit_alt2$ID %in% zerosig$ID[zerosig$zero01==0]),]
candidate_p10u_altomit_alt2[which(candidate_p10u_altomit_alt2$ID %in% zerosig$ID[zerosig$zero01==0]),]
zerosig = data.frame(ID=HQdp[,1], zero01=zero01, zero05=zero05)
zero05 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.05))
zerosig = data.frame(ID=HQdp[,1], zero01=zero01, zero05=zero05)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
candidate_p10u_altomit_alt2[which(candidate_p10u_altomit_alt2$ID %in% zerosig$ID[zerosig$zero01==0]),]
HQdp[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID),]
HQalt[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID),]
zerosig[zerosig$ID == 1_236128_G_A, ]
zerosig[zerosig$ID == "1_236128_G_A", ]
which(zerosig$ID == "1_236128_G_A")
b0_p_mat[2,]
HQdpONLY[2,]
HQaltONLY[2,]
b0_p_mat = matrix(ncol=ncol(HQdpONLY), nrow=nrow(HQdpONLY))
for (i in 1:nrow(seqdata)){
for (j in 1:length(sample_names)){
if (HQdpONLY[i,j] == 0){
b0_p_mat[i,j] = 1
} else if (HQaltONLY[i,j] > 0){
b0_p_mat[i,j] = 0
} else {
b0_p_mat[i,j] = 0.5^HQdpONLY[i,j]
}
}
}
zero01 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.01))
zero05 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.05))
zerosig = data.frame(ID=HQdp[,1], zero01=zero01, zero05=zero05)
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
b0_p_mat = matrix(ncol=ncol(HQdpONLY), nrow=nrow(HQdpONLY))
for (i in 1:nrow(seqdata)){
for (j in 1:length(sample_names)){
if (HQdpONLY[i,j] == 0){
b0_p_mat[i,j] = 1
} else if (HQaltONLY[i,j] > 0){
b0_p_mat[i,j] = 1
} else {
b0_p_mat[i,j] = 0.5^HQdpONLY[i,j]
}
}
}
zero01 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.01))
zero05 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.05))
zerosig = data.frame(ID=HQdp[,1], zero01=zero01, zero05=zero05)
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
zersigID = zerosig$ID[zerosig$zero01==0]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID == zersigID,]
zersigID = zerosig$ID[zerosig$zero05==0]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID == zersigID,]
zersigID = zerosig$ID[zerosig$zero01==0]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID == zersigID,]
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
length(zerosig$ID[zerosig$zero01==0])
sum(candidate_p10u_altomit_alt2$ID == zersigID)
zersigID
sum(candidate_p10u_altomit_alt2$ID == zersigID)
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID %in% zersigID, ]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID %in% zersigID, ]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID %in% zersigID, ]
HQdp[zersigID %in% candidate_p10u_altomit_alt2$ID,]
head(HQdp[zersigID %in% candidate_p10u_altomit_alt2$ID,])
head(HQalt[zersigID %in% candidate_p10u_altomit_alt2$ID,])
zerosig[zerosig$ID=="1_80979552_G_T",]
zersigID = zerosig$ID[zerosig$zero05==0]
zersigID
sum(zersigID=="1_80979552_G_T")
zersigID = zerosig$ID[zerosig$zero05==0]
[which(zersigID %in% candidate_p10u_altomit_alt2$ID) ,]
HQdp[which(zersigID %in% candidate_p10u_altomit_alt2$ID) ,]
HQalt[which(zersigID %in% candidate_p10u_altomit_alt2$ID) ,]
head(zersigID)
head(zerosig[zerosig$zero05==0])
head(zerosig[zerosig$zero05==0, ])
zero01 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.01))
zero05 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.05))
zerosig = data.frame(ID=HQdp[,1], zero01=zero01, zero05=zero05)
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
length(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
length(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
zersigID = zerosig$ID[zerosig$zero01==0]
candidate_p10u_altomit_alt2[ which(candidate_p10u_altomit_alt2$ID %in% zersigID), ]
HQdp[which(zersigID %in% candidate_p10u_altomit_alt2$ID) ,]
zersigID = zerosig$ID[zerosig$zero01==0]
head(HQdp[which(zersigID %in% candidate_p10u_altomit_alt2$ID) ,])
head(HQalt[which(zersigID %in% candidate_p10u_altomit_alt2$ID) ,])
head(candidate_p10u_altomit_alt2[ which(candidate_p10u_altomit_alt2$ID %in% zersigID), ])
head(seqdata)
length(unique(seqdata$ID))
nrow((seqdata$ID))
length((seqdata$ID))
zerosig = data.frame(ID=seqdata$ID, zero01=zero01, zero05=zero05)
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
length(zersigID)
which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
zero01both = zerosig$ID[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)]
zero01both
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID == zero01both[1],]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID == zero01both[2],]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID == zero01both[3],]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID=="1_236128_G_A"]
candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$ID=="1_236128_G_A",]
sum(candidate_p10u_altomit_alt2$ID  %in%  zerosig$ID[zerosig$zero05==0])
sum(zerosig$ID[zerosig$zero05==0] %in% candidate_p10u_altomit_alt2$ID)
sum(candidate_p10u_altomit_alt2$ID  %in%  zerosig$ID[zerosig$zero05==0])
sum(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
sum(candidate_p10u_altomit_alt2$ID  %in%  zerosig$ID[zerosig$zero01==0])
which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)
which(candidate_p10u_altomit_alt2$ID  %in%  zerosig$ID[zerosig$zero01==0])
candidate_p10u_altomit_alt2$ID[157]
zerosig$ID[zerosig$zero01==0][2]
zerosig$ID[zerosig$zero01==0][157]
candidate_p10u_altomit_alt2$ID[2]
which(c(1,2,3) %in% c(10,1,2))
zerosig$ID[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)]
merge(candidate_p10u_altomit_alt2, zerosig$ID[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)], by=1)
merge(candidate_p10u_altomit_alt2, zerosig$ID[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)], by=1)
merge(HQdp, zerosig$ID[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)], by=1)
merge(HQalt, zerosig$ID[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)], by=1)
zero01both
HQdpONLY = seqdata[, grep(colnames(seqdata), pattern="^HQ.depth")] # in order of sample_names
HQaltONLY = seqdata[, grep(colnames(seqdata), pattern="^HQ.alt.depth")]
zero01 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.01))
zero05 = apply(b0_p_mat, MARGIN=1, FUN=function(X) sum(X<0.05))
zerosig = data.frame(ID=seqdata$ID, zero01=zero01, zero05=zero05)
zero01both = zerosig$ID[which(zerosig$ID[zerosig$zero01==0] %in% candidate_p10u_altomit_alt2$ID)]
length(zero01both)
head(zero01both)
head(b0_p_mat)
which(zerosig$ID==1_236128_G_A)
which(zerosig$ID=="1_236128_G_A")
b0_p_mat[2,]
head(zero01)
head(b0_p_mat)
head(zero01)
head(zero05)
length(zero01 )
length(seqdata$ID)
head(zerosig )
HQdp[HQdp$ID=="1_236128_G_A", ]
HQalt[HQalt$ID=="1_236128_G_A", ]
zerosig01 = zerosig$ID[zerosig$zero01==0]
length(zerosig01)
zerosig05 = zerosig$ID[zerosig$zero05==0]
length(zerosig05)
head(zerosig01)
head(zerosig05)
zerosig01 = zerosig$ID[zerosig$zero01==0] ## requires 5 non-alt reads
zerosig05 = zerosig$ID[zerosig$zero05==0] ## requires 3 non-alt reads
merge(candidate_p10u_altomit_alt2, zerosig01, by=1)
merge(candidate_p10u_altomit_alt2, zerosig05, by=1)
merge(candidate_p10u_altomit_alt2, zerosig05, by=1)
merge(candidate_p10u_altomit_alt2, zerosig01, by=1)
merge(HQfreq, zerosig05, by=1)
head(merge(HQdp, zerosig05, by=1))
head(merge(HQalt, zerosig05, by=1))
zero01both = candidate_p10u_altomit_alt2[ candidate_p10u_altomit_alt2$ID==zerosig01, ]
zero01both = merge(candidate_p10u_altomit_alt2, zerosig01, by=1)
head(zero01both)
dim(zero01both)
zero01both
zero01both
ggplot(zero01both, aes(alt2_meanVAF)) +
geom_histogram() +
facet_grid(N_alt2 ~ ., scales="free_y") +
geom_vline(xintercept = c(0.3,0.7) )
candidate_p10u_altomit_alt2_zerosig = merge(candidate_p10u_altomit_alt2, zerosig, by=1)
head(candidate_p10u_altomit_alt2_zerosig)
dim(candidate_p10u_altomit_alt2_zerosig)
dim(candidate_p10u_altomit_alt2)
ggplot(candidate_p10u_altomit_alt2_zerosig[candidate_p10u_altomit_alt2_zerosig$zero01>0, ], aes(alt2_meanVAF)) +
geom_histogram() +
facet_grid(N_alt2 ~ ., scales="free_y") +
geom_vline(xintercept = c(0.3,0.7) )
head(candidate_p10u_altomit_alt2_zerosig)
table(candidate_p10u_altomit_alt2_zerosig[candidate_p10u_altomit_alt2_zerosig$zero01>0, ]$alt2_minVAF
)
table(candidate_p10u_altomit_alt2_zerosig[candidate_p10u_altomit_alt2_zerosig$zero01>0, ]$N_alt2)
table(candidate_p10u_altomit_alt2_zerosig$N_alt2)
sum(hsc_shared %in% candidate_p10u_altomit_alt2_zerosig[candidate_p10u_altomit_alt2_zerosig$zero01>0,]$ID) # 27
0.5^5
0.5^3
0.5^6
0.5^7
candidate_p10u_altomit_alt2_zerosig = merge(candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$zero01>0, ], zerosig, by=1)
table(candidate_p10u_altomit_alt2_zerosig$N_alt2)
candidate_p10u_altomit_alt2_zerosig = merge(candidate_p10u_altomit_alt2[candidate_p10u_altomit_alt2$zero01>0 , ], zerosig, by=1)
head(candidate_p10u_altomit_alt2_zerosig)
candidate_p10u_altomit_alt2_zerosig = merge(candidate_p10u_altomit_alt2, zerosig, by=1)
head(candidate_p10u_altomit_alt2_zerosig)
dim(candidate_p10u_altomit_alt2_zerosig)
head(candidate_p10u_altomit_alt2_zerosig)
candidate_p10u_altomit_alt2_zerosig = merge(candidate_p10u_altomit_alt2, zerosig, by=1)
candidate_p10u_altomit_alt2_zerosig01 = candidate_p10u_altomit_alt2_zerosig[candidate_p10u_altomit_alt2_zerosig$zero01>0, ]
table(candidate_p10u_altomit_alt2_zerosig01$N_alt2)
ggplot(candidate_p10u_altomit_alt2_zerosig01, aes(alt2_meanVAF)) +
geom_histogram() +
facet_grid(N_alt2 ~ ., scales="free_y") +
geom_vline(xintercept = c(0.3,0.7) )
sum(hsc_shared %in% candidate_p10u_altomit_alt2_zerosig[candidate_p10u_altomit_alt2_zerosig$zero01>0,]$ID)
sum(hsc_shared %in% candidate_p10u_altomit_alt2_zerosig01$ID) # 27
head(candidate_p10u_altomit_alt2_zerosig01)
candidate_p10u_altomit_vaf3070 = candidate_p10u_altomit_alt2_zerosig01[candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF > 0.3 & candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF < 0.7, ]
table(candidate_p10u_altomit_vaf3070$N_alt2)
table(candidate_p10u_altomit_alt2_zerosig01$N_alt2)
sum(hsc_shared %in% candidate_p10u_altomit_alt2_zerosig01$ID) # 27
sum(hsc_shared %in% candidate_p10u_altomit_vaf3070$ID) # 27
!(hsc_shared %in% candidate_p10u_altomit_vaf3070$ID)
hsc_shared %in% candidate_p10u_altomit_vaf3070$ID
hsc_shared
head(candidate_p10u_altomit_alt2_zerosig01)
merge(candidate_p10u_altomit_alt2_zerosig01, hsc_shared, by=1)
hist(candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF)
mean(candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF)
ggplot(candidate_p10u_altomit_alt2_zerosig01, aes(alt2_meanVAF)) +
geom_histogram() +
facet_grid(N_alt2 ~ ., scales="free_y") +
geom_vline(xintercept = c(0.3,0.7) )
candidate_p10u_altomit_vaf3070negative = candidate_p10u_altomit_alt2_zerosig01[candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF <= 0.3 & candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF >= 0.7, ]
dim(candidate_p10u_altomit_vaf3070negative)
candidate_p10u_altomit_vaf3070negative = candidate_p10u_altomit_alt2_zerosig01[candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF <= 0.3 | candidate_p10u_altomit_alt2_zerosig01$alt2_meanVAF >= 0.7, ]
dim(candidate_p10u_altomit_vaf3070negative)
candidate_p10u_altomit_vaf3070negative
dim(candidate_p10u_altomit_alt2_zerosig01)
getwd()
write.table(candidate_p10u_altomit_alt2_zerosig01, file="/Users/hm8/lymphocyteExpansionSequenceAnalysis/shearwater_testing/ARG_candidate_p10u_altomit_alt2_zerosig01.txt", col.names=T, row.names=F, quote=F)
write.table(candidate_p10u_altomit_alt2_zerosig01, file="/Users/hm8/lymphocyteExpansionSequenceAnalysis/shearwater_testing/ARG_candidate_p10u_altomit_alt2_zerosig01.txt", col.names=T, row.names=F, quote=F, sep="\t")
setwd("/Users/hm8/stanford/nescent_melCA/scripts/scripts_final/results")
mylist = read.table("inlist.txt")[,1]
mylist
allglms = cbind(all[,1:4], clinal[,3:4], nonclinal[,3:4], ca[,3:4], eur[,3:4], allS[,1:4], nonclinalS[,3:4], caS[,3:4])
allsamp = read.table("mel_all_paired20_2sample_caF_popyear.f_s.glm", stringsAsFactors = F, header=TRUE)
allsampS = read.table("mel_all_paired20_2sample_caF_popyear_4switch.f_s.glm", stringsAsFactors = F, header=TRUE)
allglms = cbind(allsamp[,1:4], clinal[,3:4], nonclinal[,3:4], ca[,3:4], eur[,3:4], allsampS[,1:4], nonclinalS[,3:4], caS[,3:4])
head(allglms)
clinal = read.table("mel_clinal_uniquepops_springPA_noMA.glm.noheader", stringsAsFactors = F)
eur = read.table("mel_eur_popyear_paired.f_s.glm", stringsAsFactors = F, header=TRUE)
ca = read.table("mel_ca_popyear_paired.f_s.glm ", stringsAsFactors = F, header=TRUE)
caS = read.table("mel_ca_popyear_paired_switch.f_s.glm  ", stringsAsFactors = F, header=TRUE)
nonclinal = read.table("mel_all_caF_switch_nonclinal_uniquepopsSpringPA_noMA.glm.noheader", stringsAsFactors = F)
nonclinalS = read.table("mel_all_nonclinal_paired20_2sample_caF_popyear.f_s.glm", stringsAsFactors = F, header=TRUE)
ca = read.table("mel_ca_popyear_paired.f_s.glm", stringsAsFactors = F, header=TRUE)
allglms = cbind(allsamp[,1:4], clinal[,3:4], nonclinal[,3:4], ca[,3:4], eur[,3:4], allsampS[,1:4], nonclinalS[,3:4], caS[,3:4])
caS = read.table("mel_ca_popyear_paired_switch.f_s.glm", stringsAsFactors = F, header=TRUE)
allglms = cbind(allsamp[,1:4], clinal[,3:4], nonclinal[,3:4], ca[,3:4], eur[,3:4], allsampS[,1:4], nonclinalS[,3:4], caS[,3:4])
colnames(allglms) = c("chrom" ,"pos", "all_seas.coef", "all_seas.p", "clinal.coef", "clinal.p", "nonclinal_seas.coef", "nonclinal_seas.p", "ca_seas.coef", "ca_seas.p", "eur_seas.coef", "eur_seas.p", "all_seas_flip.coef", "all_seas_flip.p", "nonclinal_seas_flip.coef", "nonclinal_seas_flip.p", "ca_seas_flip.coef", "ca_seas_flip.p")
head(allglms)
allglms = cbind(allsamp[,1:4], clinal[,3:4], nonclinal[,3:4], ca[,3:4], eur[,3:4], allsampS[,3:4], nonclinalS[,3:4], caS[,3:4])
colnames(allglms) = c("chrom" ,"pos", "all_seas.coef", "all_seas.p", "clinal.coef", "clinal.p", "nonclinal_seas.coef", "nonclinal_seas.p", "ca_seas.coef", "ca_seas.p", "eur_seas.coef", "eur_seas.p", "all_seas_flip.coef", "all_seas_flip.p", "nonclinal_seas_flip.coef", "nonclinal_seas_flip.p", "ca_seas_flip.coef", "ca_seas_flip.p")
head(allglms)
write.table(allglms, file="glm_results_Sept2018.txt", sep="\t", quote=FALSE, col.names = T, row.names = F)
write.table(format(allglms, digits=6), file="glm_results_Sept2018.txt", sep="\t", quote=FALSE, col.names = T, row.names = F)
write.table(format(allglms, digits=4), file="glm_results_Sept2018.txt", sep="\t", quote=FALSE, col.names = T, row.names = F)
library(ggplot2)
library(cowplot)
library(reshape2)
library(plyr)
library(scales)
library(RColorBrewer)
library("ggpubr")
quant = 10^(-seq(from=0, to=3, by=0.1))
inds=1:24
inds2=1:25
clinal = read.table("/Users/hm8/stanford/nescent_melCA/glm/mel_clinal_uniquepops_springPA_noMA.glm.noheader", stringsAsFactors = F)
allS = read.table("/Users/hm8/stanford/nescent_melCA/glm/mel_all_caF_switch_nonclinal_uniquepopsSpringPA_noMA.glm.noheader", stringsAsFactors = F)
allO = read.table("/Users/hm8/stanford/nescent_melCA/glm/mel_all_nonclinal_paired20_2sample_caF_popyear.f_s.glm", header=T, stringsAsFactors = F)
caS = read.table("/Users/hm8/stanford/nescent_melCA/glm/mel_ca_popyear_paired_switch.f_s.glm", stringsAsFactors = F, header=TRUE)
caO = read.table("/Users/hm8/stanford/nescent_melCA/glm/mel_ca_popyear_paired.f_s.glm", stringsAsFactors = F, header=TRUE)
concord_diff_all
concord_diff_ca
Nquant_thresh = function(x, c, quants){
#c = clinal # columns in order, chrom, pos, coef, pval
#x = allO # columns in order, chrom, pos, coef, pval
#quants = quant[inds]
# Output:
# List: N concordant and N sites per quantile
cx = merge(c[,1:4], x[,1:4], by=c(1,2)) # col 4: pval
q4 = quantile(cx[,4], probs=quants, na.rm=T)
q6 = quantile(cx[,6], probs=quants, na.rm=T)
Nquant = vector()
concord = vector()
for (i in 1:length(quants)){
focal = cx[cx[,4]<q4[i] & cx[,6]<q6[i], ] # pval under focal quantile
Nquant[i] = nrow(focal)
concord[i] = sum( (focal[,3]>=0 & focal[,5]>=0) | (focal[,3]<0 & focal[,5]<0), na.rm=T  ) # N concordant coef
}
list(concord, Nquant)
}
Nquant_bins = function(x, c, quants){
#c = clinal # columns in order, chrom, pos, coef, pval
#x = allO # columns in order, chrom, pos, coef, pval
#quants = quant[inds2]
# Output:
# List: N concordant and N sites per quantile
cx = na.omit(merge(c[,1:4], x[,1:4], by=c(1,2))) # col 4: pval
q4 = quantile(cx[,4], probs=quants, na.rm=T)
q6 = quantile(cx[,6], probs=quants, na.rm=T)
Nquant = vector()
concord = vector()
for (i in 1:(length(quants)-1) ){
focal = cx[cx[,4]<q4[i] & cx[,4]>q4[i+1] & cx[,6]<q6[i] & cx[,6]>q6[i+1], ] # pval under focal quantile
Nquant[i] = nrow(focal)
concord[i] = sum( (focal[,3]>=0 & focal[,5]>=0) | (focal[,3]<0 & focal[,5]<0), na.rm=T  ) # N concordant coef
}
list(concord, Nquant)
}
concord_difference_thresh = function(dataset1, dataset2, clinal, quants){
#clinal = clinal # columns in order, chrom, pos, coef, pval
#dataset1 = allO # columns in order, chrom, pos, coef, pval
#dataset2 = allS # columns in order, chrom, pos, coef, pval
#quants = quant[inds]
## Output:
# Table, rows = quantiles,
#   col 1: quantiles
#   col 2: pvalue
#   col 3: pvalue bonferroni corrected
#   col 4: odds ratio
#   col 5: lower 95% CI
#   col 6: upper 95% CI
outmat = matrix(ncol=6, nrow=length(quants))
colnames(outmat) = c("quantile","pval","pval.Bcor", "oddsratio", "l95CI","u95CI")
D1quant = Nquant_thresh(dataset1, clinal, quants)
D2quant = Nquant_thresh(dataset2, clinal, quants)
Nq = length(quants)
for (i in 1:length(quants)){
f1 = fisher.test(matrix( c(D1quant[[1]][i], D1quant[[2]][i], D2quant[[1]][i], D2quant[[2]][i]), ncol=2) )
outmat[i,] = c(quants[i], f1$p.value, p.adjust(f1$p.value, method = "bonferroni", n = Nq), f1$estimate, f1$conf.int[1], f1$conf.int[2])
}
outmat
}
concord_difference_bins = function(dataset1, dataset2, clinal, quants){
#clinal = clinal # columns in order, chrom, pos, coef, pval
#dataset1 = allO # columns in order, chrom, pos, coef, pval
#dataset2 = allS # columns in order, chrom, pos, coef, pval
#quants = quant[inds2]
## Output:
# Table, rows = quantiles,
#   col 1: quantiles
#   col 2: pvalue
#   col 3: pvalue bonferroni corrected
#   col 4: odds ratio
#   col 5: lower 95% CI
#   col 6: upper 95% CI
outmat = matrix(ncol=6, nrow=length(quants)-1)
colnames(outmat) = c("quantile","pval","pval.Bcor", "oddsratio", "l95CI","u95CI")
D1quant = Nquant_bins(dataset1, clinal, quants)
D2quant = Nquant_bins(dataset2, clinal, quants)
Nq = length(quants)
for (i in 1:(length(quants)-1) ){
f1 = fisher.test(matrix( c(D1quant[[1]][i], D1quant[[2]][i], D2quant[[1]][i], D2quant[[2]][i]), ncol=2) )
outmat[i,] = c(quants[i], f1$p.value, p.adjust(f1$p.value, method = "bonferroni", n = Nq), f1$estimate, f1$conf.int[1], f1$conf.int[2])
}
cbind(outmat, D1quant[[1]], D1quant[[2]], D1quant[[1]]/D1quant[[2]], D2quant[[1]], D2quant[[2]], D2quant[[1]]/D2quant[[2]])
}
concord_diff_all = concord_difference_bins(allO, allS, clinal, quant[inds])
concord_diff_ca = concord_difference_bins(caO, caS, clinal, quant[inds])
concord_diff_ca
load("/Users/hm8/stanford/nescent_melCA/clinal/results/clinal_uniquepopsPAnoMA_parallelism_vs_controlsDec2017_quant_polymorphic_ext_switch.Rdata")
nescentClinal_Cquant_controlrs = nescentClinal_Cquant_controlr
nescentClinal_Cquant_controls = nescentClinal_Cquant_control
load("/Users/hm8/stanford/nescent_melCA/clinal/results/clinal_uniquepopsPAnoMA_parallelism_vs_controlsDec2017_quant_polymorphic_ext.Rdata")
df1 = data.frame(quant[inds], nescentClinal_Cquant_controlr[inds,1], nescentClinal_Cquant_controlrs[inds,1])
head(df1)
df1b = concord_diff_all[,c(1,9,12)]
head(df1b)
colnames(df1) = c("quant","Original","Flipped")
df2b = melt(df1b, id=quant)
colnames(df2b) = c("quant","pops","concord")
ggplot(data=df2b, aes(quant, concord, group=pops) ) +
scale_x_continuous(trans="log10",
breaks=c(10^c(-2, -1, 0), expand.grid(sapply(c(1:9), function(x) x*10^c(-3, -2, -1))) [,1]),
labels=c(.01, .1, 1, rep("", length(expand.grid(sapply(c(1:9), function(x) x*10^c(-3, -2, -1)))[,1])) ) ) +
geom_hline(yintercept = 0.5, lty=2) +
geom_polygon(data=nCA, mapping=aes(x=x, y=y, group=NULL, fill=NULL), fill="red", alpha=0.5) +
geom_polygon(data=nCAs, mapping=aes(x=x, y=y, group=NULL, fill=NULL), fill="#4292c6", alpha=0.5) +
geom_line(aes(quant, concord)) +
geom_point(aes(quant, concord, fill=pops), color="black", shape=21, size=1.2) +
scale_fill_manual(name='', values=c("Original"="red","Flipped"="#4292c6") ) +
#scale_alpha_manual(name='', values=c("ALL"=1,"CA"=0.7,"EU"=0.2) ) +
#scale_size_manual(name='', values=c("ALL"=2,"CA"=2,"EU"=2) ) +
ylab("Concordance") +
xlab("") +
ylim(0.2,1) +
ggtitle("All Populations") +
theme(legend.direction="vertical",
legend.justification=c("right"),
legend.position=c(1,0.2),
legend.key.size = unit(0.35, "cm"),
legend.background=element_rect(fill="white", colour="white", linetype="solid", size=.25),
legend.text=element_text(size=8),
legend.title=element_text(size=0),
legend.title.align=.5,
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 12)),
axis.text=element_text(size=8),
axis.title=element_text(size=10),
plot.title = element_text(size=10),
plot.margin = margin(5, 0, 0, 0, "pt") )
ggplot(data=df2b, aes(quant, concord, group=pops) ) +
scale_x_continuous(trans="log10",
breaks=c(10^c(-2, -1, 0), expand.grid(sapply(c(1:9), function(x) x*10^c(-3, -2, -1))) [,1]),
labels=c(.01, .1, 1, rep("", length(expand.grid(sapply(c(1:9), function(x) x*10^c(-3, -2, -1)))[,1])) ) ) +
geom_hline(yintercept = 0.5, lty=2) +
#geom_polygon(data=nCA, mapping=aes(x=x, y=y, group=NULL, fill=NULL), fill="red", alpha=0.5) +
#geom_polygon(data=nCAs, mapping=aes(x=x, y=y, group=NULL, fill=NULL), fill="#4292c6", alpha=0.5) +
geom_line(aes(quant, concord)) +
geom_point(aes(quant, concord, fill=pops), color="black", shape=21, size=1.2) +
scale_fill_manual(name='', values=c("Original"="red","Flipped"="#4292c6") ) +
#scale_alpha_manual(name='', values=c("ALL"=1,"CA"=0.7,"EU"=0.2) ) +
#scale_size_manual(name='', values=c("ALL"=2,"CA"=2,"EU"=2) ) +
ylab("Concordance") +
xlab("") +
ylim(0.2,1) +
ggtitle("All Populations") +
theme(legend.direction="vertical",
legend.justification=c("right"),
legend.position=c(1,0.2),
legend.key.size = unit(0.35, "cm"),
legend.background=element_rect(fill="white", colour="white", linetype="solid", size=.25),
legend.text=element_text(size=8),
legend.title=element_text(size=0),
legend.title.align=.5,
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 12)),
axis.text=element_text(size=8),
axis.title=element_text(size=10),
plot.title = element_text(size=10),
plot.margin = margin(5, 0, 0, 0, "pt") )
quant
head(df2b)
head(df1b)
df2b = melt(df1b, id=quantile)
colnames(df2b) = c("quant","pops","concord")
ggplot(data=df2b, aes(quant, concord, group=pops) ) +
scale_x_continuous(trans="log10",
breaks=c(10^c(-2, -1, 0), expand.grid(sapply(c(1:9), function(x) x*10^c(-3, -2, -1))) [,1]),
labels=c(.01, .1, 1, rep("", length(expand.grid(sapply(c(1:9), function(x) x*10^c(-3, -2, -1)))[,1])) ) ) +
geom_hline(yintercept = 0.5, lty=2) +
#geom_polygon(data=nCA, mapping=aes(x=x, y=y, group=NULL, fill=NULL), fill="red", alpha=0.5) +
#geom_polygon(data=nCAs, mapping=aes(x=x, y=y, group=NULL, fill=NULL), fill="#4292c6", alpha=0.5) +
geom_line(aes(quant, concord)) +
geom_point(aes(quant, concord, fill=pops), color="black", shape=21, size=1.2) +
scale_fill_manual(name='', values=c("Original"="red","Flipped"="#4292c6") ) +
#scale_alpha_manual(name='', values=c("ALL"=1,"CA"=0.7,"EU"=0.2) ) +
#scale_size_manual(name='', values=c("ALL"=2,"CA"=2,"EU"=2) ) +
ylab("Concordance") +
xlab("") +
ylim(0.2,1) +
ggtitle("All Populations") +
theme(legend.direction="vertical",
legend.justification=c("right"),
legend.position=c(1,0.2),
legend.key.size = unit(0.35, "cm"),
legend.background=element_rect(fill="white", colour="white", linetype="solid", size=.25),
legend.text=element_text(size=8),
legend.title=element_text(size=0),
legend.title.align=.5,
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 12)),
axis.text=element_text(size=8),
axis.title=element_text(size=10),
plot.title = element_text(size=10),
plot.margin = margin(5, 0, 0, 0, "pt") )
colnames(df1b) = c("quant","Original","Flipped")
df2b = melt(df1b, id=quantile)
colnames(df2b) = c("quant","pops","concord")
head(df2b )
head(df1b )
df1b = concord_diff_all[,c(1,9,12)]
colnames(df1b) = c("quant","Original","Flipped")
df2b = melt(df1b, id=quant)
head(df2b)
df2b
concord_diff_all = concord_difference_thresh(allO, allS, clinal, quant[inds])
concord_diff_ca = concord_difference_thresh(caO, caS, clinal, quant[inds])
concord_diff_all
concord_diff_ca
ls()
setwd("/Users/hm8/stanford/nescent_melCA/scripts/scripts_final/results")
dim(allglms)
head(allglms)
getwd()
write.table(allglms, file="glm_results_Sept2018.txt", sep="\t", quote=FALSE, col.names = T, row.names = F)
